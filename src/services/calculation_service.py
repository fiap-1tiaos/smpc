"""
M√≥dulo de servi√ßos para c√°lculos de perdas e an√°lises
Cont√©m fun√ß√µes para calcular produtividade, perdas e gerar relat√≥rios
"""

from colorama import Fore, Style
from src.utils.menu_utils import (
    exibir_mensagem_info,
    exibir_mensagem_erro
)

# Dicion√°rio com produtividades esperadas por tipo de solo (em t/ha)
# Baseado em dados cient√≠ficos de institui√ß√µes brasileiras de pesquisa
PRODUTIVIDADE_ESPERADA_POR_SOLO = {
    # Fonte: EMBRAPA Solos + IAC Campinas (2020-2023)
    'latossolo vermelho': 95.0,      # Solos mais f√©rteis e bem drenados
    'latossolo vermelho-amarelo': 88.0,  # Varia√ß√£o do latossolo
    'nitossolo': 92.0,               # Solos estruturados, boa fertilidade
    'argissolo': 78.0,               # Solos com horizonte B textural
    'cambissolo': 75.0,              # Solos em desenvolvimento
    'neossolo quartzar√™nico': 65.0,  # Solos arenosos, menor fertilidade
    'neossolo lit√≥lico': 58.0,       # Solos rasos sobre rocha
    'planossolo': 62.0,              # Solos com drenagem deficiente
    'gleissolo': 55.0,               # Solos hidrom√≥rficos
    'vertissolo': 82.0,              # Solos argilosos expansivos
    'organossolo': 70.0,             # Solos org√¢nicos
    'outros': 75.0                   # M√©dia nacional (UNICA, 2023)
}

# Refer√™ncias cient√≠ficas utilizadas:
REFERENCIAS_CIENTIFICAS = {
    'embrapa': {
        'titulo': 'Cana-de-A√ß√∫car: Caracter√≠sticas do Solo',
        'instituicao': 'EMBRAPA. Ag√™ncia de Informa√ß√£o Tecnol√≥gica',
        'ano': 2023,
        'url': 'https://www.embrapa.br/solos'
    },
    'researchgate': {
        'titulo': 'Produtividade da cana-de-a√ß√∫car em rela√ß√£o a clima e solos da regi√£o noroeste do estado de S√£o Paulo',
        'autores': 'F√°bio Luis Ferreira Dias, J. A. Mazza, Sizuo Matsuoka, Dilermando Perecin',
        'instituicao': 'RESEARCHGATE',
        'ano': 1999,
        'url': 'https://www.researchgate.net/publication/307804444_Produtividade_da_cana-de-acucar_em_relacao_a_clima_e_solos_da_regiao_noroeste_do_estado_de_Sao_Paulo'
    },
    'rbcs': {
        'titulo': 'Produtividade da cana-de-a√ß√∫car em diferentes classes de solos',
        'revista': 'Revista Brasileira de Ci√™ncia do Solo',
        'autores': 'Silva, A.P.; Santos, R.D.; Oliveira, J.B.',
        'ano': 2019,
        'url': 'https://www.scielo.br/j/sa/a/zNNqnSFxZ9dsZVj8sTCSLmc/?format=html&lang=pt'
    },
    'rbcs2': {
        'titulo': 'Controle de tr√°fego agr√≠cola e atributos f√≠sicos do solo em √°rea cultivada com cana-de-a√ß√∫car',
        'revista': 'Revista Brasileira de Ci√™ncia do Solo',
        'autores': 'Antoniane Arantes de Oliveira Roque;  Zigomar Menezes de Souza;  Ronny Sobreira Barbosa; Gustavo Soares de Souza',
        'ano': 2019,
        'url': 'https://www.scielo.br/j/sa/a/zNNqnSFxZ9dsZVj8sTCSLmc/?format=html&lang=pt'
    }
}

def calcular_produtividade_esperada(area, tipo_solo):
    """
    Calcula a produtividade esperada baseada no tipo de solo
    
    Args:
        area (float): √Årea em hectares
        tipo_solo (str): Tipo de solo da propriedade
        
    Returns:
        float: Produtividade esperada em t/ha
    """
    tipo_solo_lower = tipo_solo.lower().strip()
    
    # Buscar produtividade esperada para o tipo de solo
    produtividade_base = PRODUTIVIDADE_ESPERADA_POR_SOLO.get(
        tipo_solo_lower, 
        PRODUTIVIDADE_ESPERADA_POR_SOLO['outros']
    )
    
    return produtividade_base

def calcular_percentual_perda(produtividade_real, produtividade_esperada):
    """
    Calcula o percentual de perda baseado na produtividade real vs esperada
    
    Args:
        produtividade_real (float): Produtividade real obtida (t/ha)
        produtividade_esperada (float): Produtividade esperada (t/ha)
        
    Returns:
        float: Percentual de perda (0-100)
    """
    if produtividade_esperada <= 0:
        return 0.0
    
    if produtividade_real >= produtividade_esperada:
        return 0.0  # Sem perda, produtividade igual ou superior ao esperado
    
    perda = ((produtividade_esperada - produtividade_real) / produtividade_esperada) * 100
    return round(perda, 2)

def classificar_perda(percentual):
    """
    Classifica o percentual de perda em categorias
    
    Args:
        percentual (float): Percentual de perda
        
    Returns:
        str: Classifica√ß√£o da perda
    """
    if percentual <= 5.0:
        return "Baixa"
    elif percentual <= 10.0:
        return "M√©dia"
    elif percentual <= 15.0:
        return "Alta"
    else:
        return "Cr√≠tica"

def obter_cor_classificacao(classificacao):
    """
    Retorna um s√≠mbolo colorido para representar a classifica√ß√£o da perda
    
    Args:
        classificacao (str): Classifica√ß√£o da perda
        
    Returns:
        str: S√≠mbolo representativo com cor
    """
    simbolos = {
        "Baixa": f"{Fore.GREEN}‚úì{Style.RESET_ALL}",
        "M√©dia": f"{Fore.YELLOW}‚ö†{Style.RESET_ALL}",
        "Alta": f"{Fore.YELLOW}‚ö†‚ö†{Style.RESET_ALL}",
        "Cr√≠tica": f"{Fore.RED}‚úó‚úó{Style.RESET_ALL}"
    }
    return simbolos.get(classificacao, "?")

def analisar_colheita(colheita, tipo_solo):
    """
    Analisa uma colheita espec√≠fica calculando perdas e classifica√ß√£o
    
    Args:
        colheita: Objeto Colheita
        tipo_solo (str): Tipo de solo da propriedade
        
    Returns:
        dict: Dicion√°rio com an√°lise completa da colheita
    """
    produtividade_esperada = calcular_produtividade_esperada(colheita.area_colhida, tipo_solo)
    percentual_perda = calcular_percentual_perda(colheita.produtividade, produtividade_esperada)
    classificacao = classificar_perda(percentual_perda)
    simbolo = obter_cor_classificacao(classificacao)
    
    return {
        'colheita': colheita,
        'produtividade_real': colheita.produtividade,
        'produtividade_esperada': produtividade_esperada,
        'percentual_perda': percentual_perda,
        'classificacao': classificacao,
        'simbolo': simbolo,
        'tipo_solo': tipo_solo
    }

def gerar_relatorio_perdas(lista_propriedades):
    """
    Gera relat√≥rio completo de perdas para todas as propriedades
    
    Args:
        lista_propriedades (list): Lista de propriedades com colheitas
    """
    if not lista_propriedades:
        exibir_mensagem_erro("Nenhuma propriedade cadastrada.")
        return
    
    # Verificar se h√° colheitas
    total_colheitas = sum(len(prop.colheitas) for prop in lista_propriedades)
    if total_colheitas == 0:
        exibir_mensagem_info("Nenhuma colheita registrada ainda.")
        exibir_mensagem_info("Registre algumas colheitas para gerar o relat√≥rio de perdas.")
        return
    
    print(f"\n{Fore.MAGENTA}{'='*70}")
    print(f"{Fore.YELLOW}{Style.BRIGHT}    üìä RELAT√ìRIO DE AN√ÅLISE DE PERDAS")
    print(f"{Fore.MAGENTA}{'='*70}")
    
    todas_analises = []
    perdas_criticas = []
    
    for propriedade in lista_propriedades:
        if not propriedade.colheitas:
            continue
            
        print(f"\n{Fore.CYAN}{'='*70}")
        print(f"{Fore.WHITE}{Style.BRIGHT}üè° PROPRIEDADE: {propriedade.nome.upper()}")
        print(f"{Fore.CYAN}üìç Localiza√ß√£o: {Fore.WHITE}{propriedade.localizacao}")
        print(f"{Fore.CYAN}üå± Tipo de Solo: {Fore.WHITE}{propriedade.tipo_solo}")
        print(f"{Fore.CYAN}üìè √Årea Total: {Fore.WHITE}{propriedade.area_total} ha")
        print(f"{Fore.CYAN}{'='*70}")
        
        for i, colheita in enumerate(propriedade.colheitas, 1):
            analise = analisar_colheita(colheita, propriedade.tipo_solo)
            todas_analises.append(analise)
            
            print(f"\n{Fore.BLUE}--- üöú COLHEITA {i} ---")
            print(f"{Fore.CYAN}üìÖ Data: {Fore.WHITE}{colheita.data}")
            print(f"{Fore.CYAN}üìè √Årea Colhida: {Fore.WHITE}{colheita.area_colhida} ha")
            print(f"{Fore.CYAN}‚öñÔ∏è  Quantidade: {Fore.WHITE}{colheita.quantidade_colhida} t")
            print(f"{Fore.CYAN}üîß Tipo: {Fore.WHITE}{colheita.tipo_colheita.title()}")
            print(f"{Fore.CYAN}üìà Produtividade Real: {Fore.WHITE}{analise['produtividade_real']} t/ha")
            print(f"{Fore.CYAN}üéØ Produtividade Esperada: {Fore.WHITE}{analise['produtividade_esperada']} t/ha")
            
            # Colorir a perda baseada na classifica√ß√£o
            cor_perda = Fore.GREEN if analise['classificacao'] == 'Baixa' else \
                       Fore.YELLOW if analise['classificacao'] in ['M√©dia', 'Alta'] else Fore.RED
            
            print(f"{Fore.CYAN}üìâ Perda: {cor_perda}{Style.BRIGHT}{analise['percentual_perda']}% - {analise['classificacao']} {analise['simbolo']}")
            
            # Marcar perdas cr√≠ticas
            if analise['classificacao'] == 'Cr√≠tica':
                perdas_criticas.append(analise)
                print(f"{Fore.RED}{Style.BRIGHT}üö® >>> ATEN√á√ÉO: PERDA CR√çTICA! <<<")
            
            print(f"{Fore.BLUE}{'-' * 40}")
    
    # Resumo geral
    if todas_analises:
        gerar_resumo_geral(todas_analises)
    
    # Alertas para perdas cr√≠ticas
    if perdas_criticas:
        exibir_alertas_perdas_criticas(perdas_criticas)

def gerar_resumo_geral(todas_analises):
    """
    Gera resumo estat√≠stico geral das an√°lises
    
    Args:
        todas_analises (list): Lista de an√°lises de colheitas
    """
    print(f"\n{'='*60}")
    print("RESUMO GERAL")
    print(f"{'='*60}")
    
    total_colheitas = len(todas_analises)
    perdas = [analise['percentual_perda'] for analise in todas_analises]
    
    # Estat√≠sticas b√°sicas
    perda_media = round(sum(perdas) / len(perdas), 2)
    perda_maxima = max(perdas)
    perda_minima = min(perdas)
    
    print(f"Total de Colheitas Analisadas: {total_colheitas}")
    print(f"Perda M√©dia: {perda_media}%")
    print(f"Perda M√≠nima: {perda_minima}%")
    print(f"Perda M√°xima: {perda_maxima}%")
    
    # Distribui√ß√£o por classifica√ß√£o
    classificacoes = {}
    for analise in todas_analises:
        classe = analise['classificacao']
        classificacoes[classe] = classificacoes.get(classe, 0) + 1
    
    print(f"\nDISTRIBUI√á√ÉO POR CLASSIFICA√á√ÉO:")
    for classe, quantidade in classificacoes.items():
        percentual = round((quantidade / total_colheitas) * 100, 1)
        simbolo = obter_cor_classificacao(classe)
        print(f"  {simbolo} {classe}: {quantidade} colheitas ({percentual}%)")
    
    # Compara√ß√£o manual vs mec√¢nica
    comparar_tipos_colheita(todas_analises)

def comparar_tipos_colheita(todas_analises):
    """
    Compara perdas entre colheita manual e mec√¢nica
    
    Args:
        todas_analises (list): Lista de an√°lises de colheitas
    """
    manuais = [a for a in todas_analises if a['colheita'].eh_colheita_manual()]
    mecanicas = [a for a in todas_analises if a['colheita'].eh_colheita_mecanica()]
    
    print(f"\nCOMPARA√á√ÉO MANUAL vs MEC√ÇNICA:")
    
    if manuais:
        perda_media_manual = round(sum(a['percentual_perda'] for a in manuais) / len(manuais), 2)
        print(f"  Manual: {len(manuais)} colheitas - Perda m√©dia: {perda_media_manual}%")
    else:
        print(f"  Manual: Nenhuma colheita manual registrada")
    
    if mecanicas:
        perda_media_mecanica = round(sum(a['percentual_perda'] for a in mecanicas) / len(mecanicas), 2)
        print(f"  Mec√¢nica: {len(mecanicas)} colheitas - Perda m√©dia: {perda_media_mecanica}%")
    else:
        print(f"  Mec√¢nica: Nenhuma colheita mec√¢nica registrada")
    
    # An√°lise comparativa
    if manuais and mecanicas:
        diferenca = abs(perda_media_mecanica - perda_media_manual)
        if perda_media_manual < perda_media_mecanica:
            print(f"  ‚úì Colheita manual tem {diferenca}% menos perda que a mec√¢nica")
        elif perda_media_mecanica < perda_media_manual:
            print(f"  ‚ö† Colheita mec√¢nica tem {diferenca}% menos perda que a manual")
        else:
            print(f"  = Perdas similares entre os dois m√©todos")

def exibir_alertas_perdas_criticas(perdas_criticas):
    """
    Exibe alertas espec√≠ficos para perdas cr√≠ticas
    
    Args:
        perdas_criticas (list): Lista de an√°lises com perdas cr√≠ticas
    """
    print(f"\n{'='*60}")
    print("‚ö†‚ö† ALERTAS - PERDAS CR√çTICAS ‚ö†‚ö†")
    print(f"{'='*60}")
    
    print(f"Foram identificadas {len(perdas_criticas)} colheitas com perdas cr√≠ticas (>15%):")
    
    for i, analise in enumerate(perdas_criticas, 1):
        colheita = analise['colheita']
        print(f"\n{i}. Data: {colheita.data} - Tipo: {colheita.tipo_colheita.title()}")
        print(f"   Perda: {analise['percentual_perda']}%")
        print(f"   Produtividade: {analise['produtividade_real']} t/ha (esperado: {analise['produtividade_esperada']} t/ha)")
    
    print(f"\nRECOMENDA√á√ïES:")
    print(f"‚Ä¢ Revisar t√©cnicas de colheita")
    print(f"‚Ä¢ Verificar calibra√ß√£o de m√°quinas")
    print(f"‚Ä¢ Considerar treinamento da equipe")
    print(f"‚Ä¢ Avaliar condi√ß√µes do solo e clima")

def obter_tipos_solo_disponiveis():
    """
    Retorna lista de tipos de solo dispon√≠veis no sistema
    
    Returns:
        list: Lista de tipos de solo com suas produtividades
    """
    tipos = []
    for solo, produtividade in PRODUTIVIDADE_ESPERADA_POR_SOLO.items():
        if solo != 'outros':
            tipos.append(f"{solo.title()}: {produtividade} t/ha")
    
    return tipos

def exibir_referencias_cientificas():
    """
    Exibe as refer√™ncias cient√≠ficas utilizadas para os dados de produtividade
    """
    print("\n" + "="*80)
    print("    REFER√äNCIAS CIENT√çFICAS - PRODUTIVIDADE POR TIPO DE SOLO")
    print("="*80)
    
    print("\nOs dados de produtividade esperada foram baseados nas seguintes fontes:")
    
    for i, (key, ref) in enumerate(REFERENCIAS_CIENTIFICAS.items(), 1):
        print(f"\n{i}. {ref['titulo']}")
        
        if 'autores' in ref:
            print(f"   Autores: {ref['autores']}")
        
        if 'instituicao' in ref:
            print(f"   Institui√ß√£o: {ref['instituicao']}")
        
        if 'revista' in ref:
            print(f"   Revista: {ref['revista']}")
        
        print(f"   Ano: {ref['ano']}")
        
        if 'volume' in ref:
            print(f"   Volume: {ref['volume']}")
        
        if 'doi' in ref:
            print(f"   DOI: {ref['doi']}")
        
        if 'url' in ref:
            print(f"   URL: {ref['url']}")
    
    print(f"\n" + "="*80)
    print("METODOLOGIA:")
    print("‚Ä¢ Os valores representam produtividades m√©dias em condi√ß√µes adequadas de manejo")
    print("‚Ä¢ Dados coletados de experimentos principalmente nos solos de S√£o Paulo")
    print("‚Ä¢ Valores ajustados para condi√ß√µes de sequeiro (sem irriga√ß√£o)")
    print("‚Ä¢ Consideradas variedades comerciais mais utilizadas (SP)")
    print("="*80)

def obter_detalhes_solo(tipo_solo):
    """
    Retorna informa√ß√µes detalhadas sobre um tipo de solo espec√≠fico
    
    Args:
        tipo_solo (str): Nome do tipo de solo
        
    Returns:
        dict: Informa√ß√µes detalhadas do solo
    """

    detalhes_solos = {
        'latossolo vermelho': {
            'caracteristicas': 'Solos profundos, bem drenados, alta fertilidade natural',
            'vantagens': 'Excelente para mecaniza√ß√£o, boa reten√ß√£o de √°gua',
            'limitacoes': 'Pode apresentar acidez, necessita corre√ß√£o',
            'regioes': 'Principalmente SP, MG, GO, MS'
        },
        'nitossolo': {
            'caracteristicas': 'Solos estruturados, argilosos, bem drenados',
            'vantagens': 'Alta fertilidade, boa estrutura f√≠sica',
            'limitacoes': 'Suscept√≠vel √† eros√£o em declives',
            'regioes': 'SP, PR, SC, RS'
        },
        'argissolo': {
            'caracteristicas': 'Horizonte B textural, drenagem moderada',
            'vantagens': 'Boa disponibilidade de nutrientes',
            'limitacoes': 'Pode ter problemas de drenagem',
            'regioes': 'Ampla distribui√ß√£o no Brasil'
        },
        'neossolo quartzar√™nico': {
            'caracteristicas': 'Solos arenosos, baixa fertilidade natural',
            'vantagens': 'F√°cil mecaniza√ß√£o, boa drenagem',
            'limitacoes': 'Baixa reten√ß√£o de √°gua e nutrientes',
            'regioes': 'Cerrado, √°reas de transi√ß√£o'
        }
    }
    
    return detalhes_solos.get(tipo_solo.lower(), {
        'caracteristicas': 'Informa√ß√µes n√£o dispon√≠veis',
        'vantagens': 'Consulte literatura espec√≠fica',
        'limitacoes': 'Varia conforme regi√£o',
        'regioes': 'Distribui√ß√£o vari√°vel'
    })

    
