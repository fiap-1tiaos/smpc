"""
M√≥dulo de utilit√°rios para o menu do sistema
Cont√©m fun√ß√µes para exibir menus e interagir com o usu√°rio
"""

from colorama import init, Fore, Back, Style
from .validation import validar_opcao_menu

# Inicializar colorama para Windows
init(autoreset=True)

def exibir_menu_principal():
    """
    Exibe o menu principal do sistema com todas as op√ß√µes dispon√≠veis
    """
    largura = 70
    
    print(f"\n{Fore.CYAN}{'='*largura}")
    print(f"{Fore.YELLOW}{Style.BRIGHT}  üåæ SISTEMA DE MONITORAMENTO DE PERDAS - CANA-DE-A√á√öCAR üåæ")
    print(f"{Fore.CYAN}{'='*largura}")
    print(f"{Fore.WHITE}{Style.DIM}         Controle inteligente de produtividade agr√≠cola")
    print(f"{Fore.CYAN}{'='*largura}")
    print()
    print(f"{Fore.WHITE}{Style.BRIGHT}üìã MENU PRINCIPAL - Escolha uma op√ß√£o:")
    print()
    
    # Fun√ß√£o auxiliar para criar linha de item do menu
    def criar_linha_menu(numero, icone, texto):
        # Conte√∫do sem c√≥digos de cor para calcular comprimento real
        conteudo_limpo = f" {numero}. {icone} {texto}"
        # Remover c√≥digos de cor para calcular comprimento real
        import re
        conteudo_sem_cor = re.sub(r'\x1b\[[0-9;]*m', '', conteudo_limpo)
        
        espacos_necessarios = largura - len(conteudo_sem_cor) - 3
        if espacos_necessarios < 0:
            espacos_necessarios = 0
            
        return f"{Fore.CYAN}‚îÇ {numero}. {icone} {texto}{' ' * espacos_necessarios}‚îÇ"
    
    # Se√ß√£o 1: Gest√£o de Propriedades
    titulo1 = "GEST√ÉO DE PROPRIEDADES"
    tracejado1 = "‚îÄ" * (largura - len(titulo1) - 4)
    print(f"{Fore.CYAN}‚îå‚îÄ {Fore.GREEN}{titulo1} {Fore.CYAN}{tracejado1}‚îê")
    print(criar_linha_menu(f"{Fore.GREEN}1", f"{Fore.WHITE}üè°", f"{Fore.WHITE}Cadastrar Nova Propriedade"))
    print(f"{Fore.CYAN}‚îî{'‚îÄ' * (largura - 2)}‚îò")
    print()
    
    # Se√ß√£o 2: Colheitas e An√°lises
    titulo2 = "COLHEITAS E AN√ÅLISES"
    tracejado2 = "‚îÄ" * (largura - len(titulo2) - 4)
    print(f"{Fore.CYAN}‚îå‚îÄ {Fore.YELLOW}{titulo2} {Fore.CYAN}{tracejado2}‚îê")
    print(criar_linha_menu(f"{Fore.GREEN}2", f"{Fore.WHITE}üöú", f"{Fore.WHITE}Registrar Colheita"))
    print(criar_linha_menu(f"{Fore.GREEN}3", f"{Fore.WHITE}üìä", f"{Fore.WHITE}Consultar Relat√≥rio de Perdas"))
    print(criar_linha_menu(f"{Fore.GREEN}4", f"{Fore.WHITE}üìã", f"{Fore.WHITE}Visualizar Hist√≥rico"))
    print(f"{Fore.CYAN}‚îî{'‚îÄ' * (largura - 2)}‚îò")
    print()
    
    # Se√ß√£o 3: Backup e Configura√ß√µes
    titulo3 = "BACKUP E CONFIGURA√á√ïES"
    tracejado3 = "‚îÄ" * (largura - len(titulo3) - 4)
    print(f"{Fore.CYAN}‚îå‚îÄ {Fore.MAGENTA}{titulo3} {Fore.CYAN}{tracejado3}‚îê")
    print(criar_linha_menu(f"{Fore.GREEN}5", f"{Fore.WHITE}üíæ", f"{Fore.WHITE}Fazer Backup dos Dados"))
    print(criar_linha_menu(f"{Fore.GREEN}6", f"{Fore.WHITE}üì•", f"{Fore.WHITE}Importar Backup"))
    print(criar_linha_menu(f"{Fore.GREEN}7", f"{Fore.WHITE}üîß", f"{Fore.WHITE}Configura√ß√£o do Banco Oracle"))
    print(criar_linha_menu(f"{Fore.GREEN}8", f"{Fore.WHITE}‚ö°", f"{Fore.WHITE}Status do Sistema"))
    print(f"{Fore.CYAN}‚îî{'‚îÄ' * (largura - 2)}‚îò")
    print()
    
    # Se√ß√£o 4: Sistema
    titulo4 = "SISTEMA"
    tracejado4 = "‚îÄ" * (largura - len(titulo4) - 4)
    print(f"{Fore.CYAN}‚îå‚îÄ {Fore.RED}{titulo4} {Fore.CYAN}{tracejado4}‚îê")
    print(criar_linha_menu(f"{Fore.RED}9", f"{Fore.WHITE}üö™", f"{Fore.WHITE}Sair do Sistema"))
    print(f"{Fore.CYAN}‚îî{'‚îÄ' * (largura - 2)}‚îò")
    print()

def obter_opcao_usuario():
    """
    L√™ e valida a op√ß√£o escolhida pelo usu√°rio no menu principal
    
    Returns:
        int: Op√ß√£o v√°lida escolhida pelo usu√°rio (1-9)
    """
    opcoes_validas = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    largura = 70
    
    while True:
        try:
            print(f"{Fore.CYAN}‚îå{'‚îÄ' * (largura - 2)}‚îê")
            
            # Criar linha de entrada com espa√ßamento correto
            prompt_texto = " üéØ Digite sua escolha (1-9): "
            espacos_para_input = largura - len(prompt_texto) - 3
            
            opcao = input(f"{Fore.CYAN}‚îÇ{Fore.YELLOW}{prompt_texto}{Style.RESET_ALL}").strip()
            print(f"{Fore.CYAN}‚îî{'‚îÄ' * (largura - 2)}‚îò")
            
            valido, mensagem = validar_opcao_menu(opcao, opcoes_validas)
            
            if valido:
                print(f"\n{Fore.GREEN}‚úÖ Op√ß√£o {opcao} selecionada!{Style.RESET_ALL}")
                return int(opcao)
            else:
                exibir_mensagem_erro(mensagem)
                
        except KeyboardInterrupt:
            print(f"\n\n{Fore.YELLOW}üëã Saindo do sistema...")
            return 9
        except Exception as e:
            exibir_mensagem_erro("Erro inesperado. Tente novamente.")

def exibir_mensagem_sucesso(mensagem):
    """
    Exibe uma mensagem de sucesso formatada
    
    Args:
        mensagem (str): Mensagem de sucesso a ser exibida
    """
    largura = 70
    titulo = "SUCESSO"
    tracejado = "‚îÄ" * (largura - len(titulo) - 4)
    
    # Calcular espa√ßos precisos para o conte√∫do (considerando emojis)
    conteudo_limpo = f" ‚úÖ {mensagem}"
    # Emojis podem ocupar 2 espa√ßos visuais, ent√£o ajustamos
    espacos_necessarios = largura - len(conteudo_limpo) - 2
    if espacos_necessarios < 0:
        espacos_necessarios = 0
    
    print(f"\n{Fore.GREEN}‚îå‚îÄ {Style.BRIGHT}{titulo} {Style.NORMAL}{tracejado}‚îê")
    print(f"{Fore.GREEN}‚îÇ ‚úÖ {mensagem}{' ' * espacos_necessarios}‚îÇ{Style.RESET_ALL}")
    print(f"{Fore.GREEN}‚îî{'‚îÄ' * (largura - 2)}‚îò{Style.RESET_ALL}")
    print()

def exibir_mensagem_erro(mensagem):
    """
    Exibe uma mensagem de erro formatada
    
    Args:
        mensagem (str): Mensagem de erro a ser exibida
    """
    largura = 70
    titulo = "ERRO"
    tracejado = "‚îÄ" * (largura - len(titulo) - 4)
    
    # Calcular espa√ßos precisos para o conte√∫do (considerando emojis)
    conteudo_limpo = f" ‚ùå {mensagem}"
    # Emojis podem ocupar 2 espa√ßos visuais, ent√£o ajustamos
    espacos_necessarios = largura - len(conteudo_limpo) - 2
    if espacos_necessarios < 0:
        espacos_necessarios = 0
    
    print(f"\n{Fore.RED}‚îå‚îÄ {Style.BRIGHT}{titulo} {Style.NORMAL}{tracejado}‚îê")
    print(f"{Fore.RED}‚îÇ ‚ùå {mensagem}{' ' * espacos_necessarios}‚îÇ{Style.RESET_ALL}")
    print(f"{Fore.RED}‚îî{'‚îÄ' * (largura - 2)}‚îò{Style.RESET_ALL}")
    print()

def exibir_mensagem_info(mensagem):
    """
    Exibe uma mensagem informativa formatada
    
    Args:
        mensagem (str): Mensagem informativa a ser exibida
    """
    largura = 70
    titulo = "INFORMA√á√ÉO"
    tracejado = "‚îÄ" * (largura - len(titulo) - 4)
    
    # Calcular espa√ßos precisos para o conte√∫do (considerando emojis)
    conteudo_limpo = f" ‚ÑπÔ∏è  {mensagem}"
    # Emojis podem ocupar 2 espa√ßos visuais, ent√£o ajustamos
    espacos_necessarios = largura - len(conteudo_limpo) - 1
    if espacos_necessarios < 0:
        espacos_necessarios = 0
    
    print(f"\n{Fore.CYAN}‚îå‚îÄ {Style.BRIGHT}{titulo} {Style.NORMAL}{tracejado}‚îê")
    print(f"{Fore.CYAN}‚îÇ ‚ÑπÔ∏è  {mensagem}{' ' * espacos_necessarios}‚îÇ{Style.RESET_ALL}")
    print(f"{Fore.CYAN}‚îî{'‚îÄ' * (largura - 2)}‚îò{Style.RESET_ALL}")
    print()

def exibir_separador():
    """
    Exibe um separador visual
    """
    print(f"{Fore.CYAN}{'-' * 70}")

def pausar_execucao():
    """
    Pausa a execu√ß√£o e aguarda o usu√°rio pressionar Enter
    """
    input(f"\n{Fore.YELLOW}‚è∏Ô∏è  Pressione Enter para continuar...{Style.RESET_ALL}")

def confirmar_acao(mensagem):
    """
    Solicita confirma√ß√£o do usu√°rio para uma a√ß√£o
    
    Args:
        mensagem (str): Mensagem de confirma√ß√£o
        
    Returns:
        bool: True se o usu√°rio confirmar, False caso contr√°rio
    """
    while True:
        resposta = input(f"\n{Fore.YELLOW}‚ùì {mensagem} {Fore.GREEN}(s/n){Style.RESET_ALL}: ").strip().lower()
        
        if resposta in ['s', 'sim', 'y', 'yes']:
            return True
        elif resposta in ['n', 'nao', 'n√£o', 'no']:
            return False
        else:
            exibir_mensagem_erro("Digite 's' para sim ou 'n' para n√£o")

def limpar_tela():
    """
    Limpa a tela do terminal (funciona no Windows e Linux/Mac)
    """
    import os
    os.system('cls' if os.name == 'nt' else 'clear')

def exibir_cabecalho(titulo):
    """
    Exibe um cabe√ßalho formatado para se√ß√µes do sistema
    
    Args:
        titulo (str): T√≠tulo da se√ß√£o
    """
    print(f"\n{Fore.MAGENTA}{'='*70}")
    print(f"{Fore.YELLOW}{Style.BRIGHT}    üìã {titulo.upper()}")
    print(f"{Fore.MAGENTA}{'='*70}")

def exibir_lista_numerada(itens, titulo="Lista de Itens"):
    """
    Exibe uma lista numerada de itens
    
    Args:
        itens (list): Lista de itens a serem exibidos
        titulo (str): T√≠tulo da lista
    """
    print(f"\n{Fore.CYAN}{Style.BRIGHT}üìù {titulo}:")
    print(f"{Fore.CYAN}{'-' * (len(titulo) + 4)}")
    
    if not itens:
        print(f"{Fore.YELLOW}‚ö†Ô∏è  Nenhum item encontrado.")
        return
    
    for i, item in enumerate(itens, 1):
        print(f"{Fore.GREEN}{i}. {Fore.WHITE}{item}")

def solicitar_entrada(prompt, tipo_validacao=None):
    """
    Solicita entrada do usu√°rio com valida√ß√£o opcional
    
    Args:
        prompt (str): Mensagem para solicitar a entrada
        tipo_validacao (function): Fun√ß√£o de valida√ß√£o opcional
        
    Returns:
        str: Entrada v√°lida do usu√°rio
    """
    while True:
        try:
            entrada = input(f"{Fore.CYAN}üìù {prompt}: {Style.RESET_ALL}").strip()
            
            if tipo_validacao:
                valido, mensagem = tipo_validacao(entrada)
                if valido:
                    return entrada
                else:
                    exibir_mensagem_erro(mensagem)
            else:
                return entrada
                
        except KeyboardInterrupt:
            print(f"\n\n{Fore.YELLOW}‚ö†Ô∏è  Opera√ß√£o cancelada pelo usu√°rio.")
            return None
        except Exception as e:
            exibir_mensagem_erro("Erro inesperado. Tente novamente.")

def tipos_comuns_de_solos(solos):
    """
    Exibe tipos de solos comuns com formata√ß√£o colorida
    
    Args:
        solos (dict): Dicion√°rio com tipos de solos
    """
    print(f"\n{Fore.MAGENTA}{'='*50}")
    print(f"{Fore.YELLOW}{Style.BRIGHT}    üå± TIPOS DE SOLOS COMUNS üå±")
    print(f"{Fore.MAGENTA}{'='*50}")
    
    for key, solo in solos.items():
        print(f"{Fore.GREEN}{key}. {Fore.WHITE}{solo}")
    
    print(f"{Fore.MAGENTA}{'='*50}")

def exibir_mensagem_alerta(mensagem):
    """
    Exibe uma mensagem de alerta formatada
    
    Args:
        mensagem (str): Mensagem de alerta a ser exibida
    """
    print(f"\n{Fore.YELLOW}{Style.BRIGHT}‚ö†Ô∏è  ATEN√á√ÉO: {mensagem}{Style.RESET_ALL}")
    print()

def exibir_titulo_secao(titulo, icone="üìã"):
    """
    Exibe um t√≠tulo de se√ß√£o com formata√ß√£o especial
    
    Args:
        titulo (str): T√≠tulo da se√ß√£o
        icone (str): √çcone para o t√≠tulo
    """
    print(f"\n{Fore.BLUE}{Style.BRIGHT}{icone} {titulo.upper()}")
    print(f"{Fore.BLUE}{'-' * (len(titulo) + 4)}")

def exibir_banner_boas_vindas():
    """
    Exibe um banner de boas-vindas elaborado
    """
    largura = 70
    
    print(f"\n{Fore.GREEN}{'‚ñà' * largura}")
    print(f"{Fore.GREEN}‚ñà{' ' * (largura - 2)}‚ñà")
    print(f"{Fore.GREEN}‚ñà{Fore.YELLOW}{Style.BRIGHT}  üåæ BEM-VINDO AO SISTEMA DE MONITORAMENTO AGR√çCOLA üåæ  {Fore.GREEN}‚ñà")
    print(f"{Fore.GREEN}‚ñà{' ' * (largura - 2)}‚ñà")
    print(f"{Fore.GREEN}‚ñà{Fore.WHITE}  üìä Controle inteligente de produtividade na cana-de-a√ß√∫car{' ' * (largura - 62)}‚ñà")
    print(f"{Fore.GREEN}‚ñà{Fore.WHITE}  üéØ An√°lise de perdas e otimiza√ß√£o de colheitas{' ' * (largura - 49)}‚ñà")
    print(f"{Fore.GREEN}‚ñà{Fore.WHITE}  üíæ Integra√ß√£o com banco de dados Oracle{' ' * (largura - 42)}‚ñà")
    print(f"{Fore.GREEN}‚ñà{' ' * (largura - 2)}‚ñà")
    print(f"{Fore.GREEN}{'‚ñà' * largura}{Style.RESET_ALL}")

def exibir_rodape():
    """
    Exibe um rodap√© formatado para o sistema
    """
    largura = 70
    
    print(f"\n{Fore.CYAN}{'='*largura}")
    print(f"{Fore.WHITE}{Style.DIM}  Sistema desenvolvido para monitoramento de perdas na colheita")
    print(f"{Fore.WHITE}{Style.DIM}         üåæ Tecnologia a servi√ßo da agricultura üåæ")
    print(f"{Fore.CYAN}{'='*largura}{Style.RESET_ALL}")

def exibir_separador_secao():
    """
    Exibe um separador visual entre se√ß√µes
    """
    largura = 70
    
    print(f"\n{Fore.MAGENTA}{'‚ñì' * largura}")
    print(f"{Fore.MAGENTA}{'‚ñì' * largura}{Style.RESET_ALL}\n")
